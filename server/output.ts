/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/devices": {
    /** @description returns all registered devices */
    get: operations["getDevices"];
    post: operations["register"];
  };
  "/lighting/dimmers/{deviceId}/{value}": {
    post: operations["setDimmer"];
  };
  "/lighting/dimmers/{deviceId}/{value}/timer/{timeunit}": {
    /** @description sets a dimmer to a specific value on a timer */
    post: operations["setDimmerTimer"];
  };
  "/lighting/switches/{deviceId}": {
    get: operations["getSwitchState"];
  };
  "/lighting/switches/{deviceId}/{value}": {
    post: operations["setSwitch"];
  };
  "/lighting/switches/{deviceId}/{value}/timer/{minutes}": {
    /** @description sets a switch to a specific value on a timer */
    post: operations["setSwitchTimer"];
  };
  "/lightingSummary": {
    get: operations["getLightingSummary"];
  };
  "/temperature": {
    get: operations["temperatureSummary"];
  };
  "/temperature/forecast/{days}": {
    get: operations["getForecast"];
  };
  "/temperature/{zoneId}": {
    get: operations["getZoneTemperature"];
  };
  "/temperature/{zoneId}/heater": {
    /** @description gets the state of the heater */
    get: operations["getHeaterState"];
  };
  "/temperature/{zoneId}/heater/{state}": {
    /** @description turns the heater on or off */
    post: operations["setHeaterState"];
  };
  "/zones": {
    get: operations["getZones"];
  };
  "/zones/{zoneId}/quiet": {
    get: operations["quietZone"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description ok */
    LightingSummary: {
      zones?: components["schemas"]["LightingZone"][];
      zoneStatus?: components["schemas"]["LightingZoneStatus"][];
    };
    LightingZone: {
      id?: string;
      name?: string;
      /** Format: int32 */
      deviceId?: number;
      /** @enum {string} */
      deviceType?: "dimmer" | "switch";
      zone?: string;
    };
    /** @description the status of the lighting zone. */
    LightingZoneStatus: {
      id?: string;
      name?: string;
      /** Format: date-time */
      lastUpdate?: string;
      /** Format: int32 */
      level?: number;
    };
    /** @description ok */
    TemperatureSummary: {
      zones?: components["schemas"]["TemperatureZone"][];
      zoneStatus?: components["schemas"]["TemperatueZoneStatus"][];
    };
    /** @description a single temperature zone */
    TemperatureZone: {
      /**
       * Format: int32
       * @description the unique identifier for the zone
       */
      id: number;
      name: string;
      /** Format: int32 */
      inputPosition?: number;
      /** Format: int32 */
      outputPosition?: number;
      zone?: string;
    };
    /** @description status of a single zone */
    TemperatueZoneStatus: {
      /** @description the unique identifier for the zone */
      id: string;
      /** @description the name of the zone */
      name?: string;
      /**
       * Format: double
       * @description the temperature in the zone
       */
      value: number;
      /**
       * @description the temperature units
       * @default fahrenheit
       * @enum {string}
       */
      units?: "celsius" | "fahrenheit";
      /**
       * Format: date-time
       * @description the timestamp when the temperature was measured
       */
      timestamp: string;
    };
    ApiResponse: {
      /** Format: int32 */
      code?: number;
      /** @example everything is ok */
      message?: string;
    };
    HeaterState: {
      id?: string;
      state?: string;
    };
    DeviceState: {
      id?: string;
      name?: string;
      /** Format: date-time */
      lastUpdate?: string;
      /** Format: int32 */
      level?: number;
    };
    ForecastResponse: {
      city?: components["schemas"]["City"];
      values?: components["schemas"]["Forecast"][];
    };
    Forecast: {
      /** Format: date-time */
      date?: string;
      /** Format: double */
      pressure?: number;
      /** Format: int32 */
      humidity?: number;
      /** Format: double */
      windSpeed?: number;
      /** Format: int32 */
      clouds?: number;
      temperature?: components["schemas"]["ForecastTemperature"];
      weather?: components["schemas"]["WeatherForecast"];
    };
    City: {
      /** Format: int64 */
      id?: number;
      name?: string;
      /** Format: double */
      lat?: number;
      /** Format: double */
      lon?: number;
      country?: string;
    };
    ForecastTemperature: {
      /** Format: double */
      low?: number;
      /** Format: double */
      high?: number;
      /** Format: double */
      morning?: number;
      /** Format: double */
      day?: number;
      /** Format: double */
      evening?: number;
      /** Format: double */
      night?: number;
    };
    WeatherForecast: {
      summary?: string;
      description?: string;
      icon?: string;
    };
    DeviceRegistrationInfo: {
      /**
       * Format: uri
       * @example http://10.0.0.220:8080
       */
      uri?: string;
      /**
       * Format: uuid
       * @example 0729a580-2240-11e6-9eb5-0002a5d5c51b
       */
      id?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description returns all registered devices */
  getDevices: {
    parameters: {
      query?: {
        /** @description number of records to skip */
        skip?: number;
        /** @description max number of records to return */
        limit?: number;
      };
    };
    responses: {
      /** @description All the devices */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  register: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeviceRegistrationInfo"];
      };
    };
    responses: {
      /** @description successfully registered device */
      200: {
        content: never;
      };
    };
  };
  setDimmer: {
    parameters: {
      path: {
        deviceId: string;
        value: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  /** @description sets a dimmer to a specific value on a timer */
  setDimmerTimer: {
    parameters: {
      query?: {
        units?: "seconds" | "minutes" | "milliseconds";
      };
      path: {
        deviceId: string;
        value: number;
        timeunit: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  getSwitchState: {
    parameters: {
      path: {
        deviceId: string;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": components["schemas"]["DeviceState"];
        };
      };
    };
  };
  setSwitch: {
    parameters: {
      path: {
        deviceId: string;
        value: true | false;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  /** @description sets a switch to a specific value on a timer */
  setSwitchTimer: {
    parameters: {
      path: {
        deviceId: string;
        value: true | false;
        minutes: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  getLightingSummary: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["LightingSummary"];
        };
      };
    };
  };
  temperatureSummary: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["TemperatureSummary"];
        };
      };
    };
  };
  getForecast: {
    parameters: {
      path: {
        days: number;
      };
    };
    responses: {
      /** @description the forecast */
      200: {
        content: {
          "application/json": components["schemas"]["ForecastResponse"];
        };
      };
    };
  };
  getZoneTemperature: {
    parameters: {
      path: {
        zoneId: string;
      };
    };
    responses: {
      /** @description Zone temperature */
      200: {
        content: {
          "application/json": components["schemas"]["TemperatueZoneStatus"];
        };
      };
    };
  };
  /** @description gets the state of the heater */
  getHeaterState: {
    parameters: {
      path: {
        zoneId: string;
      };
    };
    responses: {
      /** @description heater state */
      200: {
        content: {
          "application/json": components["schemas"]["HeaterState"];
        };
      };
    };
  };
  /** @description turns the heater on or off */
  setHeaterState: {
    parameters: {
      path: {
        zoneId: string;
        state: false | true;
      };
    };
    responses: {
      /** @description Status of the operation */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  getZones: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  quietZone: {
    parameters: {
      path: {
        zoneId: "basement" | "first-floor" | "second-floor";
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: never;
      };
    };
  };
}
